1
00:00:00,000 --> 00:00:04,000
Hace poco, cuando estaba diseando este curso, les envi

2
00:00:04,000 --> 00:00:08,000
una encuesta a mis alumnos y les ped que

3
00:00:08,000 --> 00:00:12,000
me hicieran cualquier pregunta sobre las pruebas unitarias, las

4
00:00:12,000 --> 00:00:16,000
reas que encuentran desafiantes. Una de las preguntas que surgieron

5
00:00:16,000 --> 00:00:20,000
algunas veces fue cmo probar mtodos vacos. Hasta ahora, todos los ejemplos

6
00:00:20,000 --> 00:00:24,000
que hemos visto se referan a mtodos que devolvan algn valor.

7
00:00:24,000 --> 00:00:28,000
Entonces en esta conferencia, vamos a ver los mtodos vacos. Ahora solo para refrescar

8
00:00:28,000 --> 00:00:32,000
tu memoria, antes te dije sobre dos tipos

9
00:00:32,000 --> 00:00:36,000
de funciones en programacin. Tenemos funciones de consulta que devuelven

10
00:00:36,000 --> 00:00:40,000
algn valor y funciones de comando que se supone que realizan una accin.

11
00:00:40,000 --> 00:00:44,000
Una funcin vaca por definicin es una

12
00:00:44,000 --> 00:00:48,000
funcin de comando. Estas funciones de comando a menudo cambian

13
00:00:48,000 --> 00:00:52,000
algn tipo de estado, lo que significa que cambian el estado de un

14
00:00:52,000 --> 00:00:56,000
objeto en la memoria, pueden cambiar el valor de una o ms propiedades

15
00:00:56,000 --> 00:01:00,000
y, adems, pueden persistir en un estado, pueden puntuar este objeto en una

16
00:01:00,000 --> 00:01:04,000
base de datos , pueden llamar a un servicio web, pueden llamar a

17
00:01:04,000 --> 00:01:08,000
un mensaje que (? ) Ahora, para esta seccin,

18
00:01:08,000 --> 00:01:12,000
no vamos a tratar con esos recursos. As que echemos un vistazo a un

19
00:01:12,000 --> 00:01:16,000
ejemplo de un mtodo vaco que cambia el estado de un objeto en la memoria.

20
00:01:16,000 --> 00:01:20,000
As que aqu tenemos esta clase ErrorLogger,

21
00:01:20,000 --> 00:01:24,000
mira este mtodo, Log. Se necesita un mensaje

22
00:01:24,000 --> 00:01:28,000
de error que haga una validacin bsica para

23
00:01:28,000 --> 00:01:32,000
asegurarse de que el error sea IsNullOrWhiteSpace, de

24
00:01:32,000 --> 00:01:36,000
lo contrario arrojar una ArgumentNullException. Ahora, vamos a ver las pruebas

25
00:01:36,000 --> 00:01:40,000
de escritura para los mtodos que arrojan excepciones ms adelante en esta

26
00:01:40,000 --> 00:01:44,000
seccin, as que no se preocupe por la primera parte, luego establece

27
00:01:44,000 --> 00:01:48,000
la ltima propiedad de error, aqu se supone que debe escribir este

28
00:01:48,000 --> 00:01:52,000
error en un registro. en realidad hay un problema en este comentario.

29
00:01:52,000 --> 00:01:56,000
Entonces, ignormoslo por ahora, y finalmente, se

30
00:01:56,000 --> 00:02:00,000
plantea un evento. De nuevo, vamos a ver cmo probar los mtodos

31
00:02:00,000 --> 00:02:04,000
que plantean un evento ms adelante en esta seccin. Pero por ahora solo queremos

32
00:02:04,000 --> 00:02:08,000
enfocarnos en probar esta parte. Entonces, cuando llamemos al mtodo

33
00:02:08,000 --> 00:02:12,000
de registro, debemos verificar que la ltima propiedad de la

34
00:02:12,000 --> 00:02:16,000
flecha est configurada correctamente. Este es el resultado

35
00:02:16,000 --> 00:02:20,000
de este mtodo. Entonces no devuelve un valor, est cambiando el

36
00:02:20,000 --> 00:02:24,000
estado de un objeto en la memoria. Entonces, volviendo

37
00:02:24,000 --> 00:02:28,000
a nuestro proyecto de pruebas

38
00:02:28,000 --> 00:02:32,000
unitarias, otra clase de prueba

39
00:02:32,000 --> 00:02:36,000
de unidades, ErrorLogger, Tests.

40
00:02:36,000 --> 00:02:40,000
Primero aplicamos el atributo TestFixture.

41
00:02:40,000 --> 00:02:44,000
Ahora, un mtodo de

42
00:02:44,000 --> 00:02:48,000
prueba pblico vaco Log

43
00:02:48,000 --> 00:02:52,000
When Called debe establecer

44
00:02:52,000 --> 00:02:56,000
la ltima ErrorProperty. Por supuesto, hay otros casos de prueba, pero

45
00:02:56,000 --> 00:03:00,000
no vamos a preocuparnos por ellos todava. As que

46
00:03:00,000 --> 00:03:04,000
creemos una instancia de registrador

47
00:03:04,000 --> 00:03:08,000
de errores, un nuevo ErrorLogger,

48
00:03:08,000 --> 00:03:12,000
ahora llamamos registrador. Log, a travs del mensaje de

49
00:03:12,000 --> 00:03:16,000
error otra vez utilizamos valores simples. Una cadena

50
00:03:16,000 --> 00:03:20,000
simple como a. Este mtodo es nulo, as que no vamos

51
00:03:20,000 --> 00:03:24,000
a obtener un resultado aqu. No tiene sentido, verdad? En su lugar, queremos

52
00:03:24,000 --> 00:03:28,000
afirmar que la ltima propiedad de la flecha se establece en consecuencia.

53
00:03:28,000 --> 00:03:32,000
As que Afirma eso,

54
00:03:32,000 --> 00:03:36,000
log logger. LastError, Is

55
00:03:36,000 --> 00:03:40,000
EqualTo a. Vamos a

56
00:03:40,000 --> 00:03:44,000
ejecutar esta prueba.

57
00:03:44,000 --> 00:03:48,000
De acuerdo, pas, hermosa, ahora como te dije antes, quiero asegurarme de que

58
00:03:48,000 --> 00:03:52,000
esta sea una prueba digna de confianza. Entonces, voy a volver

59
00:03:52,000 --> 00:03:56,000
al cdigo de produccin, esta es la lnea que

60
00:03:56,000 --> 00:04:00,000
se encarga de hacer que nuestro pase de prueba.

61
00:04:00,000 --> 00:04:04,000
Entonces, si lo comento, y nuestra prueba an se aprueba, eso significa

62
00:04:04,000 --> 00:04:08,000
que la prueba est probando lo incorrecto, no es un fideicomiso para

63
00:04:08,000 --> 00:04:12,000
la prueba, y si falla, sabemos que es una buena prueba.

64
00:04:12,000 --> 00:04:16,000
Entonces, guarde, aqu, voy a

65
00:04:16,000 --> 00:04:20,000
ejecutar esta prueba nuevamente, esta

66
00:04:20,000 --> 00:04:24,000
vez, fall. Esperbamos A,

67
00:04:24,000 --> 00:04:28,000
pero obtuvimos Nulo. Porque el valor predeterminado de esa propiedad es nulo.

68
00:04:28,000 --> 00:04:32,000
Entonces, volvamos a nuestra clase ErrorLogger, vamos a

69
00:04:32,000 --> 00:04:36,000
traer esto de vuelta. En la prxima conferencia, te

70
00:04:36,000 --> 00:04:40,000
mostrar cmo probar los mtodos que lanzan una excepcin.


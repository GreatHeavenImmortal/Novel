1
00:00:00,000 --> 00:00:04,000
Bien, ahora es el momento para un ejercicio.

2
00:00:04,000 --> 00:00:08,000
Entonces, en la carpeta de los fundamentos,

3
00:00:08,000 --> 00:00:12,000
abre este archivo. FizzBuzz.

4
00:00:12,000 --> 00:00:16,000
En caso de que nunca antes haya visto FizzBuzz, es bsicamente una

5
00:00:16,000 --> 00:00:20,000
de las preguntas que a veces se presentan en las entrevistas de programacin.

6
00:00:20,000 --> 00:00:24,000
Entonces, el entrevistador puede pedirle que escriba una funcin que tome

7
00:00:24,000 --> 00:00:28,000
un nmero y devuelva una cadena. Si este nmero es

8
00:00:28,000 --> 00:00:32,000
divisible entre 3 y 5, la funcin

9
00:00:32,000 --> 00:00:36,000
debera devolver FizzBuzz. Si el nmero solo es

10
00:00:36,000 --> 00:00:40,000
divisible por 3, debera devolver Fizz, si solo es

11
00:00:40,000 --> 00:00:44,000
divisible por 5, debera devolver Buzz, de lo contrario

12
00:00:44,000 --> 00:00:48,000
debera devolver el mismo nmero. Ahora hay varias formas de implementar

13
00:00:48,000 --> 00:00:52,000
esta funcin, esta es solo una forma. Lo que quiero que haga ahora

14
00:00:52,000 --> 00:00:56,000
es escribir un conjunto de pruebas unitarias para esta funcin para asegurarse

15
00:00:56,000 --> 00:01:00,000
de que esta funcin se implemente correctamente. Una vez ms, no

16
00:01:00,000 --> 00:01:04,000
confe en estas rutas de ejecucin, sino selas

17
00:01:04,000 --> 00:01:08,000
como punto de partida. Entonces piense en esta funcin,

18
00:01:08,000 --> 00:01:12,000
GetOutput, como una caja negra. Usted sabe que el algoritmo de

19
00:01:12,000 --> 00:01:16,000
FizzBuzz se asegura de que esta funcin implemente ese algoritmo correctamente.

20
00:01:16,000 --> 00:01:19,000
En la prxima conferencia, vers mi solucin.


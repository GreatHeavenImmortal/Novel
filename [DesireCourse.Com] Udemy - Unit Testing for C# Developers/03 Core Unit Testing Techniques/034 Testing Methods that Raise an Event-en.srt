1
00:00:00,000 --> 00:00:04,000
In this lecture I'm going to show you how to

2
00:00:04,000 --> 00:00:08,000
test methods that raise an event. So here in our log method,

3
00:00:08,000 --> 00:00:12,000
once the event is stored in our storage,

4
00:00:12,000 --> 00:00:16,000
you raise this event, error, log. We can see

5
00:00:16,000 --> 00:00:20,000
error log is an event of type event

6
00:00:20,000 --> 00:00:24,000
handler of guid. If all of this sounds foreign to you, you're

7
00:00:24,000 --> 00:00:28,000
going to need to watch my C# MS course, because there I have covered

8
00:00:28,000 --> 00:00:32,000
events and delegates in detail. So basically here we are

9
00:00:32,000 --> 00:00:36,000
raising this ErrorLogged event, and as an even argument

10
00:00:36,000 --> 00:00:40,000
we are sending a new guid. Perhaps this

11
00:00:40,000 --> 00:00:44,000
is the ID that is generated by our storage.

12
00:00:44,000 --> 00:00:48,000
So to test the log method we call it, give it a valid

13
00:00:48,000 --> 00:00:52,000
error message, and verify that it raises the ErrorLogged event

14
00:00:52,000 --> 00:00:56,000
with a new guid, okay? So,

15
00:00:56,000 --> 00:01:00,000
back in our test class,

16
00:01:00,000 --> 00:01:04,000
another test, public void

17
00:01:04,000 --> 00:01:08,000
Log ValidError, that's the

18
00:01:08,000 --> 00:01:12,000
scenario. You should RaiseErrorLogged

19
00:01:12,000 --> 00:01:16,000
Event. Okay?

20
00:01:16,000 --> 00:01:20,000
So, I'm going to create

21
00:01:20,000 --> 00:01:24,000
a logger object, ErrorLogger, now

22
00:01:24,000 --> 00:01:28,000
how can we verify that this object raises an event. It's actually

23
00:01:28,000 --> 00:01:32,000
very simple. Before acting, you are going to subscribe to

24
00:01:32,000 --> 00:01:36,000
that event. So, if the log method raises the event

25
00:01:36,000 --> 00:01:40,000
we'll be notified. Now, to subscribe to this event, we write

26
00:01:40,000 --> 00:01:44,000
logger.ErrorLogged. This is

27
00:01:44,000 --> 00:01:48,000
our event, right? We subscribe by adding a new handler

28
00:01:48,000 --> 00:01:52,000
we use a lambda expression here, sender

29
00:01:52,000 --> 00:01:56,000
and args. So these are our

30
00:01:56,000 --> 00:02:00,000
parameters, sender is the source of the event, and args

31
00:02:00,000 --> 00:02:04,000
is the event argument. So, these parameters

32
00:02:04,000 --> 00:02:08,000
go to and here's the body of a function.

33
00:02:08,000 --> 00:02:12,000
So, this lambda expression represents

34
00:02:12,000 --> 00:02:16,000
our event handler. When the ErrorLogged event

35
00:02:16,000 --> 00:02:20,000
is raised, this function will be executed. So in the body

36
00:02:20,000 --> 00:02:24,000
of this function, I can get the event argument, in this case

37
00:02:24,000 --> 00:02:28,000
event ID. So, I'm going to define

38
00:02:28,000 --> 00:02:32,000
a variable called id, and initially set it

39
00:02:32,000 --> 00:02:36,000
to an empty guid. Now, when the

40
00:02:36,000 --> 00:02:40,000
ErrorLogged event is raised, I'm going to set

41
00:02:40,000 --> 00:02:44,000
ID, to args. Which is the id of this error.

42
00:02:44,000 --> 00:02:48,000
Now, we act, so

43
00:02:48,000 --> 00:02:52,000
logger.log A

44
00:02:52,000 --> 00:02:56,000
filing our assertion is very simple. If this event is

45
00:02:56,000 --> 00:03:00,000
raised, this function is executed, and that means

46
00:03:00,000 --> 00:03:04,000
ID will no longer be an empty guid. It will

47
00:03:04,000 --> 00:03:08,000
be the value that comes with the event, so

48
00:03:08,000 --> 00:03:12,000
we assert,

49
00:03:12,000 --> 00:03:16,000
that id is

50
00:03:16,000 --> 00:03:20,000
not equal to

51
00:03:20,000 --> 00:03:24,000
Guid.Empty. Let's run this test.

52
00:03:24,000 --> 00:03:28,000
Okay, it passed

53
00:03:28,000 --> 00:03:32,000
beautiful, but once again I want to make sure that we are testing

54
00:03:32,000 --> 00:03:36,000
the right thing. So back to our ErrorLogger Class,

55
00:03:36,000 --> 00:03:40,000
this is the line that is responsible for making that test pass.

56
00:03:40,000 --> 00:03:44,000
So I'm going to comment it out, and see if our test still passes or not.

57
00:03:44,000 --> 00:03:48,000
Back here, let's rerun this test,

58
00:03:48,000 --> 00:03:52,000
Okay, it failed, so we are

59
00:03:52,000 --> 00:03:56,000
testing the right thing, now, let's bring this

60
00:03:56,000 --> 00:04:00,000
back in. So, let's recap,

61
00:04:00,000 --> 00:04:04,000
to test the method that raises an event, all we have to do

62
00:04:04,000 --> 00:04:08,000
is to subscribe to that event in your test

63
00:04:08,000 --> 00:04:12,000
method, before acting. In your event handler

64
00:04:12,000 --> 00:04:16,000
you're going to get some value. In this case, we are getting

65
00:04:16,000 --> 00:04:20,000
a new guid. So, if this event is raised,

66
00:04:20,000 --> 00:04:24,000
then, our id should no longer be an empty guid

67
00:04:24,000 --> 00:04:28,000
after acting. And that's why we have a simple assertion

68
00:04:28,000 --> 00:04:32,000
to make sure ID is not an empty

69
00:04:32,000 --> 00:04:34,000
guid.


1
00:00:00,000 --> 00:00:04,000
Tudo bem, agora estamos prontos para escrever testes de

2
00:00:04,000 --> 00:00:08,000
interao para esse mtodo. Mas antes de comearmos,

3
00:00:08,000 --> 00:00:12,000
quero apenas destacar algo. Mais cedo no curso,

4
00:00:12,000 --> 00:00:16,000
falei sobre servios de aplicativos. Eu lhe disse que os servios

5
00:00:16,000 --> 00:00:20,000
de aplicativos so responsveis pela orquestrao. Eles fazem trabalhos

6
00:00:20,000 --> 00:00:24,000
de alto nvel. E aqui esta classe  um

7
00:00:24,000 --> 00:00:28,000
exemplo perfeito de um servio de aplicativo. Porque esse mtodo est

8
00:00:28,000 --> 00:00:32,000
orquestrando algumas coisas diferentes. Ele est obtendo registros de

9
00:00:32,000 --> 00:00:36,000
governanta do banco de dados, e para cada governanta

10
00:00:36,000 --> 00:00:40,000
est gerando uma declarao, e tambm enviando essa declarao

11
00:00:40,000 --> 00:00:44,000
por e-mail para a Governanta. Ento, isso  tudo sobre orquestrao.

12
00:00:44,000 --> 00:00:48,000
Ento, eu preferiria renomear essa

13
00:00:48,000 --> 00:00:52,000
classe de HouseKeeperHelper para HouseKeeperService.

14
00:00:52,000 --> 00:00:56,000
Ento est claro que este  um servio de aplicativo. Ento, vamos

15
00:00:56,000 --> 00:01:00,000
renomear este HouseKeeperService.

16
00:01:00,000 --> 00:01:04,000
Ento, como parte dessa jornada de testes

17
00:01:04,000 --> 00:01:08,000
unitrios, comeamos com uma classe auxiliar com

18
00:01:08,000 --> 00:01:12,000
vrios mtodos estticos. Ns nos afastamos desse design,

19
00:01:12,000 --> 00:01:16,000
agora temos um servio de aplicativo adequado, o HouseKeeperService.

20
00:01:16,000 --> 00:01:20,000
E tambm temos melhor separao de interesses.

21
00:01:20,000 --> 00:01:24,000
Ento, anteriormente, todo esse cdigo para enviar e-mails

22
00:01:24,000 --> 00:01:28,000
ou gerar instrues foi implementado como mtodos estticos

23
00:01:28,000 --> 00:01:32,000
privados nessa classe. Isso viola o princpio

24
00:01:32,000 --> 00:01:36,000
da responsabilidade nica. Porque o envio de e-mails

25
00:01:36,000 --> 00:01:40,000
 uma preocupao totalmente diferente. No deve ser implementado como um

26
00:01:40,000 --> 00:01:44,000
mtodo esttico privado nesta classe. O mesmo  verdade

27
00:01:44,000 --> 00:01:48,000
para gerar instrues. Ento, com esse design, colocamos

28
00:01:48,000 --> 00:01:52,000
o cdigo onde ele pertence. Temos uma separao

29
00:01:52,000 --> 00:01:56,000
adequada de preocupaes. E tambm nossa classe

30
00:01:56,000 --> 00:02:00,000
 fracamente acoplada e testvel. Porque estamos programando contra interfaces.

31
00:02:00,000 --> 00:02:04,000
Ento, agora, vamos criar nosso primeiro teste de interao.

32
00:02:04,000 --> 00:02:08,000
De volta ao nosso projeto

33
00:02:08,000 --> 00:02:12,000
de teste de unidade, dentro

34
00:02:12,000 --> 00:02:16,000
da pasta Mocking, vamos adicionar

35
00:02:16,000 --> 00:02:20,000
uma nova classe, HouseKeeper ServiceTests.

36
00:02:20,000 --> 00:02:24,000
Adicionamos o atributo TestFixture e

37
00:02:24,000 --> 00:02:28,000
criamos nosso primeiro teste unitrio.

38
00:02:28,000 --> 00:02:32,000
public void, o mtodo em teste  enviado.

39
00:02:32,000 --> 00:02:36,000
StatementEmails. Ento, qual

40
00:02:36,000 --> 00:02:40,000
cenrio queremos testar? Queremos ter certeza de que, quando

41
00:02:40,000 --> 00:02:44,000
chamarmos esse mtodo, ele ir gerar declaraes para nossas empregadas domsticas.

42
00:02:44,000 --> 00:02:48,000
Ento, WhenCalledShouldGenerate

43
00:02:48,000 --> 00:02:52,000
Statements. Agora, vamos examinar

44
00:02:52,000 --> 00:02:56,000
rapidamente a implementao desse mtodo.

45
00:02:56,000 --> 00:03:00,000
Aqui, precisamos obter as donas de casa do banco de dados.

46
00:03:00,000 --> 00:03:04,000
Ento, precisamos zombar deste unitOfWork e retornar uma

47
00:03:04,000 --> 00:03:08,000
lista de donas de casa na memria.

48
00:03:08,000 --> 00:03:12,000
Ento, var unitOfWork vamos configurar isso

49
00:03:12,000 --> 00:03:16,000
para um novo Mock, do IUnitOfWork

50
00:03:16,000 --> 00:03:20,000
e aqui chamamos UnitOfWork. SetUp quando

51
00:03:20,000 --> 00:03:24,000
chamamos a unidade de trabalho.

52
00:03:24,000 --> 00:03:28,000
Consulta de Housekeeper, devemos retornar

53
00:03:28,000 --> 00:03:32,000
uma nova lista de objetos

54
00:03:32,000 --> 00:03:36,000
de caseiro, vamos importar a

55
00:03:36,000 --> 00:03:40,000
classe de lista. E ns inicializamos aqui, agora temos

56
00:03:40,000 --> 00:03:44,000
um problema de compilao, porque esse mtodo de consulta definiu uma unidade

57
00:03:44,000 --> 00:03:48,000
de trabalho e retorna um objeto IQueryable. Ento, aps

58
00:03:48,000 --> 00:03:52,000
a inicializao da lista, precisamos

59
00:03:52,000 --> 00:03:56,000
chamar como queryable. E o erro de compilao desapareceu.

60
00:03:56,000 --> 00:04:00,000
Agora aqui ns criamos um novo objeto Housekeeper.

61
00:04:00,000 --> 00:04:04,000
Vamos definir suas propriedades, ento temos quatro propriedades

62
00:04:04,000 --> 00:04:08,000
diferentes aqui, e trs delas so strings.

63
00:04:08,000 --> 00:04:12,000
Ento, vamos configurar o E-mail para a,

64
00:04:12,000 --> 00:04:16,000
FullName, para b, Oid  um identificador

65
00:04:16,000 --> 00:04:20,000
que definimos para 1 e, finalmente, StatementEmailBody

66
00:04:20,000 --> 00:04:24,000
para c. Valores simples. Ento este

67
00:04:24,000 --> 00:04:28,000
 o nosso UnitOfWork. Agora precisamos criar nosso

68
00:04:28,000 --> 00:04:32,000
InstanceOfOurService Ento, o servio  um novo

69
00:04:32,000 --> 00:04:36,000
HouseKeeperService, a primeira dependncia  o nosso

70
00:04:36,000 --> 00:04:40,000
unitOfWork, ento passamos o unitofWork com o objeto.

71
00:04:40,000 --> 00:04:44,000
Mas temos mais trs dependncias, ento vamos criar rapidamente

72
00:04:44,000 --> 00:04:48,000
mais alguns objetos simulados. O segundo 

73
00:04:48,000 --> 00:04:52,000
o statementGenerator que configuramos para

74
00:04:52,000 --> 00:04:56,000
um novo Mock ofIstatementGenerator e

75
00:04:56,000 --> 00:05:00,000
o terceiro  o emailSender,

76
00:05:00,000 --> 00:05:04,000
portanto o email Sender o

77
00:05:04,000 --> 00:05:08,000
define para um novo Mock,

78
00:05:08,000 --> 00:05:12,000
do I EmailSender. E o ltimo 

79
00:05:12,000 --> 00:05:16,000
o nosso messageBox. Ento, a caixa de mensagens

80
00:05:16,000 --> 00:05:20,000
tambm  um novo Mock. de IMessageBox.

81
00:05:20,000 --> 00:05:24,000
XtraMessageBox, mais preciso. Ento, agora com

82
00:05:24,000 --> 00:05:28,000
essas dependncias, podemos criar nosso servio.

83
00:05:28,000 --> 00:05:32,000
Ento, vamos passar o statementGenerator. objeto

84
00:05:32,000 --> 00:05:36,000
emailSender. objeto e,

85
00:05:36,000 --> 00:05:40,000
finalmente, messageBox. Objeto.

86
00:05:40,000 --> 00:05:44,000
Podemos ver que nosso cdigo est indo alm da tela, ento

87
00:05:44,000 --> 00:05:48,000
vamos colocar cada argumento em uma linha separada e tornar esse

88
00:05:48,000 --> 00:05:52,000
cdigo mais legvel. Ento aqui ns temos um servio. Agora

89
00:05:52,000 --> 00:05:56,000
precisamos agir. Ento, servio. SendStatementEmails. Precisamos passar um DateTime, vamos

90
00:05:56,000 --> 00:06:00,000
apenas enviar uma data arbitrria.

91
00:06:00,000 --> 00:06:04,000
E, finalmente, precisamos verificar

92
00:06:04,000 --> 00:06:08,000
se o mtodo correto

93
00:06:08,000 --> 00:06:12,000
em statementGenerator foi chamado. Ento, gerador de

94
00:06:12,000 --> 00:06:16,000
declarao. Verifique se o sg

95
00:06:16,000 --> 00:06:20,000
vai para sg. SaveStatement.

96
00:06:20,000 --> 00:06:24,000
Agora, qual argumento devemos passar aqui? O primeiro argumento  Id

97
00:06:24,000 --> 00:06:28,000
do nosso HouseKeeper, vou passar

98
00:06:28,000 --> 00:06:32,000
1, o segundo argumento  o nome do HouseKeeper,

99
00:06:32,000 --> 00:06:36,000
usamos b aqui, ento devemos passar b aqui tambm.

100
00:06:36,000 --> 00:06:40,000
E o terceiro argumento  a data da declarao. E essa  a mesma data

101
00:06:40,000 --> 00:06:44,000
que usamos aqui.

102
00:06:44,000 --> 00:06:48,000
Ento, vamos passar isso aqui tambm, e

103
00:06:48,000 --> 00:06:52,000
estamos perdendo um parntese de fechamento, entendi. Ok, ento aqui est nosso primeiro teste unitrio,

104
00:06:52,000 --> 00:06:56,000
 muito gordo, 

105
00:06:56,000 --> 00:07:00,000
volumoso e barulhento, vamos refatorar isso mais tarde,

106
00:07:00,000 --> 00:07:04,000
mas primeiro vamos garantir que ele passe. Ento, ok, temos erro de compilao

107
00:07:04,000 --> 00:07:08,000
aqui, na classe

108
00:07:08,000 --> 00:07:12,000
EmailSender, parece que estamos perdendo a

109
00:07:12,000 --> 00:07:16,000
referncia para a classe de arquivo. Ento, vamos importar o espao do nome.

110
00:07:16,000 --> 00:07:20,000
Feito. De volta  nossa

111
00:07:20,000 --> 00:07:24,000
aula de teste de

112
00:07:24,000 --> 00:07:28,000
unidade, vamos executar este teste, Ok, aqui est

113
00:07:28,000 --> 00:07:32,000
nosso teste e foi aprovado com sucesso. Bonita. Na prxima palestra, vamos refatorar esse cdigo e

114
00:07:32,000 --> 00:07:36,000
torn-lo mais limpo.

115
00:07:36,000 --> 00:07:40,000
&nbsp;


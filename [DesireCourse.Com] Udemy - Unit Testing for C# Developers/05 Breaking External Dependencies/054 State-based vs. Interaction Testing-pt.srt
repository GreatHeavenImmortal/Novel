1
00:00:00,000 --> 00:00:04,000
Nos testes de unidade que escrevemos at agora,

2
00:00:04,000 --> 00:00:08,000
afirmamos que nossos mtodos retornaram o valor correto

3
00:00:08,000 --> 00:00:12,000
ou definiram o estado correto. Isso  o que chamamos de testes baseados em estado.

4
00:00:12,000 --> 00:00:16,000
Porque ns testamos as mudanas de estado em nossa aplicao.

5
00:00:16,000 --> 00:00:20,000
No entanto, s vezes eu estou lidando com o cdigo

6
00:00:20,000 --> 00:00:24,000
que toca recursos externos, precisamos verificar a classe que estamos

7
00:00:24,000 --> 00:00:28,000
testando interage com outra classe corretamente, isso  o que

8
00:00:28,000 --> 00:00:32,000
chamamos de teste de interao. Porque testamos a interao

9
00:00:32,000 --> 00:00:36,000
de uma classe com outra. Por exemplo, aqui em nossa classe de servio

10
00:00:36,000 --> 00:00:40,000
de pedidos, quando fazemos um pedido, esse pedido deve ser gravado em um armazenamento, seja

11
00:00:40,000 --> 00:00:44,000
qual for o armazenamento, no nos importamos. Pode ser um banco de dados ou

12
00:00:44,000 --> 00:00:48,000
um armazenamento em nuvem, um dos testes de unidade que precisamos escrever para

13
00:00:48,000 --> 00:00:52,000
o mtodo de ordem de local  verificar se esse objeto OrderService interage

14
00:00:52,000 --> 00:00:56,000
com a propriedade do objeto de armazenamento. Portanto, devemos verificar se nosso

15
00:00:56,000 --> 00:01:00,000
cdigo chama o mtodo de armazenamento do objeto de armazenamento

16
00:01:00,000 --> 00:01:04,000
com o argumento correto. Esse  o objeto de ordem que recebemos aqui.

17
00:01:04,000 --> 00:01:08,000
Na prxima aula, vou mostrar como testar a interao entre

18
00:01:08,000 --> 00:01:12,000
objetos, no entanto, lembre-se de reservar essa abordagem apenas para

19
00:01:12,000 --> 00:01:16,000
lidar com recursos externos. Porque com o teste

20
00:01:16,000 --> 00:01:20,000
de interao, seus testes comeam a acoplar

21
00:01:20,000 --> 00:01:24,000
seu (? ) implementao. Voc verifica se o mtodo

22
00:01:24,000 --> 00:01:28,000
correto  chamado com os argumentos corretos. Ao refatorar e reestruturar seu

23
00:01:28,000 --> 00:01:32,000
cdigo,  possvel que voc mova alguns desses mtodos.

24
00:01:32,000 --> 00:01:36,000
E com isso, voc pode quebrar um ou mais testes. Ento, como enfatizei ao

25
00:01:36,000 --> 00:01:40,000
longo deste curso, seus testes devem testar o comportamento

26
00:01:40,000 --> 00:01:44,000
externo e no a implementao. Portanto, prefira testes baseados em

27
00:01:44,000 --> 00:01:48,000
estado para testes de interao. E use o teste

28
00:01:48,000 --> 00:01:52,000
de interao somente ao lidar com recursos externos.


1
00:00:00,000 --> 00:00:04,000
Quando voc comea a usar o teste automatizado, uma palavra que voc

2
00:00:04,000 --> 00:00:08,000
ouve com frequncia  o desenvolvimento orientado a testes ou o TDD.

3
00:00:08,000 --> 00:00:12,000
Desenvolvimento orientado a testes, ou TDD, tambm chamado de teste primeiro,

4
00:00:12,000 --> 00:00:16,000
 uma abordagem para construir software. Com o TDD, voc

5
00:00:16,000 --> 00:00:20,000
escreve seu teste antes de escrever o cdigo

6
00:00:20,000 --> 00:00:24,000
de aplicativo ou produo. A primeira vez que ouvi isso eu

7
00:00:24,000 --> 00:00:28,000
perguntei como  possvel, como podemos testar um cdigo que voc no escreveu, 

8
00:00:28,000 --> 00:00:32,000
provvel que voc tenha a mesma pergunta. Ento, vamos ver como

9
00:00:32,000 --> 00:00:36,000
funciona o TDD. Voc comea escrevendo um

10
00:00:36,000 --> 00:00:40,000
teste com falha. Este teste deve falhar porque voc

11
00:00:40,000 --> 00:00:44,000
no tem nenhum cdigo de aplicativo que o faa passar, certo?

12
00:00:44,000 --> 00:00:48,000
Ento voc escrever o cdigo de aplicativo mais simples

13
00:00:48,000 --> 00:00:52,000
que far este teste passar. O mais simples, voc no quer

14
00:00:52,000 --> 00:00:56,000
fazer engenharia aqui, voc no quer projetar um diagrama de classes com

15
00:00:56,000 --> 00:01:00,000
um zillion de classes e mtodos. Use a implementao mais simples

16
00:01:00,000 --> 00:01:04,000
que faria o teste passar. Em seguida, refatore seu cdigo, se necessrio.

17
00:01:04,000 --> 00:01:08,000
Essas trs etapas so a base do TDD.

18
00:01:08,000 --> 00:01:12,000
Voc repete essas trs etapas vrias vezes at

19
00:01:12,000 --> 00:01:16,000
construir um recurso completo. Agora, o que h de

20
00:01:16,000 --> 00:01:20,000
to especial sobre o TDD? Bem, primeiro, esse cdigo-fonte

21
00:01:20,000 --> 00:01:24,000
ser testvel desde o incio. Voc no precisa fazer nenhuma alterao

22
00:01:24,000 --> 00:01:28,000
no seu cdigo para torn-lo testvel. Em segundo lugar, 

23
00:01:28,000 --> 00:01:32,000
que cada linha do seu cdigo de produo

24
00:01:32,000 --> 00:01:36,000
 totalmente coberta por testes. O que significa que voc pode

25
00:01:36,000 --> 00:01:40,000
refatorar e implantar com confiana e, em terceiro lugar,  que isso

26
00:01:40,000 --> 00:01:44,000
geralmente resulta em uma implementao mais simples. Quando voc comea com

27
00:01:44,000 --> 00:01:48,000
um diagrama de grande classe.  provvel que voc esteja superando a

28
00:01:48,000 --> 00:01:52,000
engenharia e tornando a soluo mais complexa. Se voc escrever cdigo suficiente para

29
00:01:52,000 --> 00:01:56,000
fazer todos os testes passarem e essa soluo funcionar, no h

30
00:01:56,000 --> 00:02:00,000
razo para escrever mais cdigo. O fato de todos os testes terem passado significa

31
00:02:00,000 --> 00:02:04,000
que voc atendeu a todos os requisitos de negcios. Ento, a menos que haja um novo requisito,

32
00:02:04,000 --> 00:02:08,000
voc no precisa escrever um novo cdigo. E se houver um novo requisito,

33
00:02:08,000 --> 00:02:12,000
voc comear com o teste de falha. Ento isso  TDD.

34
00:02:12,000 --> 00:02:16,000
Em TDD, escrevemos nossos testes primeiro, e  por isso que chamamos isso

35
00:02:16,000 --> 00:02:20,000
de desenvolvimento orientado a testes de abordagem. Ento, nosso desenvolvimento 

36
00:02:20,000 --> 00:02:24,000
impulsionado pelos nossos testes. Em contraste com o TDD, ou teste

37
00:02:24,000 --> 00:02:28,000
primeiro, temos o cdigo primeiro, que  o que voc tem feito at agora.

38
00:02:28,000 --> 00:02:32,000
Voc comea com o cdigo do aplicativo e, em seguida, escreve testes.

39
00:02:32,000 --> 00:02:36,000
Qual abordagem  melhor? Depende de quem voc pergunta.

40
00:02:36,000 --> 00:02:40,000
Em teoria, o TDD  mais promissor por causa

41
00:02:40,000 --> 00:02:44,000
dos benefcios que lhe contei. Mas, na prtica, s vezes pode

42
00:02:44,000 --> 00:02:48,000
ficar muito complexo e pode atrasar voc. Se for esse o caso, 

43
00:02:48,000 --> 00:02:52,000
melhor mudar para a primeira abordagem do cdigo e escrever seus testes depois.

44
00:02:52,000 --> 00:02:56,000
Neste curso, nosso foco estar na primeira abordagem do

45
00:02:56,000 --> 00:03:00,000
cdigo, para que possamos dominar os fundamentos do teste.

46
00:03:00,000 --> 00:03:04,000
Depois de dominar os fundamentos, voc estar pronto para iniciar

47
00:03:04,000 --> 00:03:08,000
sua primeira jornada de teste. O TDD realmente requer um curso separado, e eu

48
00:03:08,000 --> 00:03:12,000
no vou falar sobre isso ao longo deste curso. Mas se voc estiver

49
00:03:12,000 --> 00:03:16,000
interessado, potencialmente no futuro, posso criar um

50
00:03:16,000 --> 00:03:19,366
curso sobre desenvolvimento orientado a testes.


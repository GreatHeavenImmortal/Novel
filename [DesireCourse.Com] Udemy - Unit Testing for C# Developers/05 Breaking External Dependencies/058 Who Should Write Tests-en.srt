1
00:00:00,000 --> 00:00:04,000
A question that I get asked a lot is

2
00:00:04,000 --> 00:00:08,000
who should write these automated tests? Is it the job

3
00:00:08,000 --> 00:00:12,000
of a developer or a tester? Well, it depends.

4
00:00:12,000 --> 00:00:16,000
Writing unit and integration tests is the job of a software developer.

5
00:00:16,000 --> 00:00:20,000
So if you're building a new feature, modifying an existing

6
00:00:20,000 --> 00:00:24,000
feature, or fixing a bug, before committing your code to the

7
00:00:24,000 --> 00:00:28,000
repository, you're responsible to cover your code with a

8
00:00:28,000 --> 00:00:32,000
(?) of unit and integration tests. You cannot expect someone else

9
00:00:32,000 --> 00:00:36,000
to write the tests for the code that you have written. This is exactly like

10
00:00:36,000 --> 00:00:40,000
writing a bit of code that doesn't compile, and then passing it to your coworker

11
00:00:40,000 --> 00:00:44,000
asking them to fix the compilation issue. In one of the teams

12
00:00:44,000 --> 00:00:48,000
that I worked at before, I had a team member who was lazy at

13
00:00:48,000 --> 00:00:52,000
writing tests for his code. There were times when I had to extend his code,

14
00:00:52,000 --> 00:00:56,000
perhaps to make a change or to implement a new feature.

15
00:00:56,000 --> 00:01:00,000
I realized his code had no tests whatsoever, so I had

16
00:01:00,000 --> 00:01:04,000
to write all the tests that he should have written in the first place, and then

17
00:01:04,000 --> 00:01:08,000
start changing his code. If you're that kind of developer,

18
00:01:08,000 --> 00:01:12,000
shame on you! This just demonstrates your laziness

19
00:01:12,000 --> 00:01:16,000
and lack of professionalism. No one cares how good of a coder

20
00:01:16,000 --> 00:01:20,000
or how intelligent you are if you cannot work with others in a professional

21
00:01:20,000 --> 00:01:24,000
manner. So, writing unit and integration tests

22
00:01:24,000 --> 00:01:28,000
is your job as a software developer.

23
00:01:28,000 --> 00:01:32,000
End-to-End tests are a different story. Sometimes they're written by

24
00:01:32,000 --> 00:01:36,000
developers, other times they're written by test engineers.

25
00:01:36,000 --> 00:01:40,000
So a test engineer doesn't care how you have implemented a given feature.

26
00:01:40,000 --> 00:01:44,000
They don't care about your classes, and methods, and parameters,

27
00:01:44,000 --> 00:01:48,000
they test the application at a high level, like an end user,

28
00:01:48,000 --> 00:01:52,000
so, they run the application and test it manually, or

29
00:01:52,000 --> 00:01:56,000
they can write automated tests that simulate a real user.

30
00:01:56,000 --> 00:02:00,000
Either way, they don't care about the internal implementation.




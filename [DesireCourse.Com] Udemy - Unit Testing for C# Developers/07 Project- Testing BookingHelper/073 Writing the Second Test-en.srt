1
00:00:00,000 --> 00:00:04,000
Alright, now the second test case. So,

2
00:00:04,000 --> 00:00:08,000
to save time, I'm going to duplicate this test method.

3
00:00:08,000 --> 00:00:12,000
And change the test method name to

4
00:00:12,000 --> 00:00:16,000
BookingStartsBeforeAndFinishes

5
00:00:16,000 --> 00:00:20,000
InTheMiddleOf

6
00:00:20,000 --> 00:00:24,000
AnExistingBooking. In this case we have overlap,

7
00:00:24,000 --> 00:00:28,000
so, this method should ReturnExisting

8
00:00:28,000 --> 00:00:32,000
BookingsReference.

9
00:00:32,000 --> 00:00:36,000
Okay, now, let's modify the logic

10
00:00:36,000 --> 00:00:40,000
here. So we can have this new booking start

11
00:00:40,000 --> 00:00:44,000
before the existing booking we don't need this argument here.

12
00:00:44,000 --> 00:00:48,000
and to simulate the middle of scenario

13
00:00:48,000 --> 00:00:52,000
we can call the after method, so After

14
00:00:52,000 --> 00:00:56,000
ExistingBookings.ArrivalDate. Now, we need to

15
00:00:56,000 --> 00:01:00,000
Assert that Result is EqualTo a,

16
00:01:00,000 --> 00:01:04,000
but someone reading this code may wonder, "what is a, where did that

17
00:01:04,000 --> 00:01:08,000
come from?" So a better way to write this Assertion,

18
00:01:08,000 --> 00:01:12,000
is like this. We want to make sure that this result is equal

19
00:01:12,000 --> 00:01:16,000
ToExistingBooking.Reference. Whatever that is.

20
00:01:16,000 --> 00:01:20,000
Let's run this test.

21
00:01:20,000 --> 00:01:24,000
Okay, our test passed, beautiful. In the next

22
00:01:24,000 --> 00:01:27,000
lecture, we'll look at another test case.


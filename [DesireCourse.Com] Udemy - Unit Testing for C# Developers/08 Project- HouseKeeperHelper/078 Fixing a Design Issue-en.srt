1
00:00:00,000 --> 00:00:04,000
So, what should we test here?

2
00:00:04,000 --> 00:00:08,000
Well, as I told you before, you should always test the

3
00:00:08,000 --> 00:00:12,000
outcome of a method. So, just to refresh your memory,

4
00:00:12,000 --> 00:00:16,000
we have two types of functions, query functions that returns

5
00:00:16,000 --> 00:00:20,000
some kind of value, and command functions that carry out a

6
00:00:20,000 --> 00:00:24,000
task. In this case, what kind of function do you think

7
00:00:24,000 --> 00:00:28,000
SendStatementEmails is? Is it a query function or

8
00:00:28,000 --> 00:00:32,000
is it a command function? Well it's a command function, that is also

9
00:00:32,000 --> 00:00:36,000
returning some value, a boolean, right? But its main

10
00:00:36,000 --> 00:00:40,000
task is to perform some action, and that is

11
00:00:40,000 --> 00:00:44,000
saving the statement and emailing it to the housekeeper.

12
00:00:44,000 --> 00:00:48,000
So, to test the outcome of this method, we should have

13
00:00:48,000 --> 00:00:52,000
1 or. more unit tests for the value it returns, maybe

14
00:00:52,000 --> 00:00:56,000
in some conditions it returns true, in other conditions it returns

15
00:00:56,000 --> 00:01:00,000
false. Also, because it's a command function

16
00:01:00,000 --> 00:01:04,000
we should make sure that this method carries out the

17
00:01:04,000 --> 00:01:08,000
tasks it's supposed to do. So in this case, we should have

18
00:01:08,000 --> 00:01:12,000
a bunch of interaction tests to make sure that this

19
00:01:12,000 --> 00:01:16,000
object, this housekeeper helper object, talks to

20
00:01:16,000 --> 00:01:20,000
other objects like statementGenerator, and emailSender

21
00:01:20,000 --> 00:01:24,000
properly. So interaction tests. Now, it's easier

22
00:01:24,000 --> 00:01:28,000
to start with state-based tests. So we want to write

23
00:01:28,000 --> 00:01:32,000
unit tests to make sure that this unit test returns the right

24
00:01:32,000 --> 00:01:36,000
value. Now look at this implementation, the only way to

25
00:01:36,000 --> 00:01:40,000
exit this method is here, return true.

26
00:01:40,000 --> 00:01:44,000
So no matter what, this method is always returning true

27
00:01:44,000 --> 00:01:48,000
there is nowhere in this code, where we are returning

28
00:01:48,000 --> 00:01:52,000
false. So there is really no value for writing such unit tests.

29
00:01:52,000 --> 00:01:56,000
And this makes me think this method would be better to

30
00:01:56,000 --> 00:02:00,000
define as void.

31
00:02:00,000 --> 00:02:04,000
So, you don't really need this return statement,

32
00:02:04,000 --> 00:02:08,000
here, and we can reduce this implementation by one line.

33
00:02:08,000 --> 00:02:12,000
Making this method shorter, so this is another

34
00:02:12,000 --> 00:02:16,000
benefit of writing unit tests. They help you come up with

35
00:02:16,000 --> 00:02:20,000
better design, for your methods and functions. Because for

36
00:02:20,000 --> 00:02:24,000
every method, for every public method you're going to test, you look at

37
00:02:24,000 --> 00:02:28,000
that method from the perspective of it's clients. How are

38
00:02:28,000 --> 00:02:32,000
these clients going to use this method? Do they really need this return

39
00:02:32,000 --> 00:02:36,000
value, this boolean? Probably not, because if this method is always

40
00:02:36,000 --> 00:02:40,000
returning true, the clients of this method are not going to have any

41
00:02:40,000 --> 00:02:44,000
decision making, okay? So, with a simple change

42
00:02:44,000 --> 00:02:48,000
we no longer need to write any state-based tests for this method,

43
00:02:48,000 --> 00:02:52,000
In the next lecture, we're going to start writing our first interaction tests.

44
00:02:52,000 --> 00:02:56,000
We want to make sure that this class talks to statementGenerator

45
00:02:56,000 --> 00:02:59,000
properly.


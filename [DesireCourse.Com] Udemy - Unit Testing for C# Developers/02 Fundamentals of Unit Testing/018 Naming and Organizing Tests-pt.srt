1
00:00:00,000 --> 00:00:04,000
Ento, na ltima seo, voc viu como

2
00:00:04,000 --> 00:00:08,000
voc deve nomear e estruturar seus testes.

3
00:00:08,000 --> 00:00:12,000
Vamos rever rapidamente a conveno que voc deve seguir para organizar seus testes

4
00:00:12,000 --> 00:00:16,000
para que voc possa localiz-los facilmente. Para cada projeto em sua soluo, voc

5
00:00:16,000 --> 00:00:20,000
ter um projeto de teste de unidade. Ento, se voc tem

6
00:00:20,000 --> 00:00:24,000
um projeto chamado TestNinja, voc deve ter um projeto

7
00:00:24,000 --> 00:00:28,000
separado chamado TestNinja. UnitTests. E como eu lhe

8
00:00:28,000 --> 00:00:32,000
disse antes, voc quer separar os testes de unidade e integrao, porque

9
00:00:32,000 --> 00:00:36,000
o teste de unidade  executado rapidamente, os testes de integrao demoram mais.

10
00:00:36,000 --> 00:00:40,000
Portanto, queremos executar testes de unidade com frequncia enquanto escrevemos cdigo

11
00:00:40,000 --> 00:00:44,000
e executamos testes de integrao antes de confirmar nosso cdigo no

12
00:00:44,000 --> 00:00:48,000
repositrio para garantir que tudo funcione. Ento, cada projeto na soluo,

13
00:00:48,000 --> 00:00:52,000
voc ter um projeto de teste de unidade separado.

14
00:00:52,000 --> 00:00:56,000
Neste projeto, voc geralmente tem uma classe de teste para cada

15
00:00:56,000 --> 00:01:00,000
classe em seu cdigo de produo. Ento, se voc tem uma classe

16
00:01:00,000 --> 00:01:04,000
chamada reserva, voc deve ter uma classe chamada testes de reserva.

17
00:01:04,000 --> 00:01:08,000
Observe o nome do plural aqui. Isso indica que essa

18
00:01:08,000 --> 00:01:12,000
classe tem vrios testes. Agora, para cada mtodo na classe

19
00:01:12,000 --> 00:01:16,000
de reserva, voc deve ter um ou mais mtodos de teste.

20
00:01:16,000 --> 00:01:20,000
Quantos testes voc precisa? Depende do que voc est testando.

21
00:01:20,000 --> 00:01:24,000
Geralmente, o nmero de testes  igual ou maior que o

22
00:01:24,000 --> 00:01:28,000
nmero de caminhos de execuo. Agora, o nome de seus mtodos

23
00:01:28,000 --> 00:01:32,000
de teste deve especificar claramente a regra de negcios que voc est

24
00:01:32,000 --> 00:01:36,000
testando. Veja alguns nomes principais. Teste 1, SaveCustomerTest, GetMovie,

25
00:01:36,000 --> 00:01:40,000
olha podemos dizer qual regra de negcio est

26
00:01:40,000 --> 00:01:44,000
sendo testada aqui.  por isso que temos uma

27
00:01:44,000 --> 00:01:48,000
conveno para nomear nossos testes. O nome do mtodo em nosso teste 

28
00:01:48,000 --> 00:01:52,000
o teste de cenrio e o comportamento esperado. Com essa conveno, podemos examinar

29
00:01:52,000 --> 00:01:56,000
o nome de um mtodo de teste e informar qual

30
00:01:56,000 --> 00:02:00,000
regra de negcios est sendo testada. Agora, s vezes voc est lidando com

31
00:02:00,000 --> 00:02:04,000
um mtodo complexo grande com tantos caminhos de execuo e casos de borda.

32
00:02:04,000 --> 00:02:08,000
Nesse caso, talvez seja melhor dedicar uma classe de

33
00:02:08,000 --> 00:02:12,000
teste separada para esse mtodo. Porque seno o teste para este mtodo

34
00:02:12,000 --> 00:02:16,000
pode colidir com sua classe de teste. Digamos que no

35
00:02:16,000 --> 00:02:20,000
nosso exemplo, CanBeCancelled pelo mtodo requer

36
00:02:20,000 --> 00:02:24,000
vrios testes. Voc pode extrair todos os

37
00:02:24,000 --> 00:02:28,000
testes para este mtodo, em uma classe separada e cham-lo

38
00:02:28,000 --> 00:02:32,000
de reserva, sublinhando CanBeCancelledByTests. Desta forma, voc pode

39
00:02:32,000 --> 00:02:36,000
localizar facilmente os testes para este mtodo.


1
00:00:00,000 --> 00:00:04,000
Ento, anteriormente nesta seo, criamos esse FakeFileReader e usamos

2
00:00:04,000 --> 00:00:08,000
isso para escrever um teste de unidade para nossa

3
00:00:08,000 --> 00:00:12,000
classe de servio de vdeo. Portanto, neste teste, estamos

4
00:00:12,000 --> 00:00:16,000
testando apenas um dos caminhos de execuo, no

5
00:00:16,000 --> 00:00:20,000
mtodo ReadVideoTitle, esse  o caminho de execuo

6
00:00:20,000 --> 00:00:24,000
que estamos testando. Mas e se voc quiser testar

7
00:00:24,000 --> 00:00:28,000
os outros caminhos de execuo? Bem, precisamos mudar o

8
00:00:28,000 --> 00:00:32,000
nosso FakeFileReader, ento ao invs de retornar uma

9
00:00:32,000 --> 00:00:36,000
string vazia, devemos retornar um objeto de vdeo

10
00:00:36,000 --> 00:00:40,000
real, serializado como json. Mas aqui est o problema, se voc modificar

11
00:00:40,000 --> 00:00:44,000
esse cdigo, o teste de unidade existente ser interrompido. Portanto, devemos criar outro

12
00:00:44,000 --> 00:00:48,000
FakeFileReader que implemente essa interface e, nesse objeto falso,

13
00:00:48,000 --> 00:00:52,000
em vez de retornar uma string vazia, devemos retornar

14
00:00:52,000 --> 00:00:56,000
um objeto json real. Podemos ver que essa

15
00:00:56,000 --> 00:01:00,000
abordagem  muito demorada. Criar todos esses objetos falsos

16
00:01:00,000 --> 00:01:04,000
 mo leva muito tempo.  por isso que usamos uma

17
00:01:04,000 --> 00:01:08,000
estrutura de isolamento de zombaria. Portanto, existem estruturas que

18
00:01:08,000 --> 00:01:12,000
nos ajudam a criar dinamicamente esses objetos

19
00:01:12,000 --> 00:01:16,000
falsos ou falsos. Portanto, no precisamos codific-los manualmente.

20
00:01:16,000 --> 00:01:20,000
Podemos cri-los dinamicamente como parte de nossos testes. e mais

21
00:01:20,000 --> 00:01:24,000
interessante, podemos program-los para se

22
00:01:24,000 --> 00:01:28,000
comportarem como quisermos. Assim, podemos program-los para lanar excees, retornar

23
00:01:28,000 --> 00:01:32,000
valores, gerar eventos e assim por diante. Novamente, temos diferentes estruturas

24
00:01:32,000 --> 00:01:36,000
de isolamento ou de zombaria por a, temos mock

25
00:01:36,000 --> 00:01:40,000
com q, temos Nsubstitute, temos FakeItEasy, temos Rhino Mocks

26
00:01:40,000 --> 00:01:44,000
e assim por diante. Depois de todos esses quadros, o

27
00:01:44,000 --> 00:01:48,000
que eu pessoalmente prefiro  falso. Ento, na prxima palestra,

28
00:01:48,000 --> 00:01:52,000
vou mostrar como usar essa estrutura para

29
00:01:52,000 --> 00:01:55,000
criar dinamicamente ou simular objetos.


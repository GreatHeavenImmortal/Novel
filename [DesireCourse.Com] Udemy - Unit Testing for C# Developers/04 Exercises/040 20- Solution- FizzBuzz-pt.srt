1
00:00:00,000 --> 00:00:04,000
Tudo bem, antes de comearmos, quero mostrar um atalho para gerar

2
00:00:04,000 --> 00:00:08,000
um mtodo de teste rapidamente. Esse atalho s funciona se

3
00:00:08,000 --> 00:00:12,000
voc estiver usando o ReSharper no Visual Studio ou se

4
00:00:12,000 --> 00:00:16,000
estiver usando o ID do piloto. Ento, no Rider voc pode

5
00:00:16,000 --> 00:00:20,000
ir para a sua caixa de dilogo de preferncias e

6
00:00:20,000 --> 00:00:24,000
procurar modelos ao vivo. Ento, aqui temos esse conceito

7
00:00:24,000 --> 00:00:28,000
chamado Life Templates, que  como trechos de cdigo, no

8
00:00:28,000 --> 00:00:32,000
Visual Studio, com isso podemos gerar rapidamente algum cdigo.

9
00:00:32,000 --> 00:00:36,000
Ento, aqui vou adicionar um novo template

10
00:00:36,000 --> 00:00:40,000
ao vivo, dar uma abreviao, vou usar

11
00:00:40,000 --> 00:00:44,000
tm, como abreviao de test method.

12
00:00:44,000 --> 00:00:48,000
E para o texto do modelo, adicionarei o mtodo de teste bsico.

13
00:00:48,000 --> 00:00:52,000
Portanto, todos os nossos mtodos de teste possuem o atributo de teste.

14
00:00:52,000 --> 00:00:56,000
Temos public void, o nome do mtodo, o

15
00:00:56,000 --> 00:01:00,000
cenrio que estamos testando e o ExpectedBehavior.

16
00:01:00,000 --> 00:01:04,000
Ok, agora quero converter essas partes

17
00:01:04,000 --> 00:01:08,000
em parmetros que posso definir em

18
00:01:08,000 --> 00:01:12,000
tempo de execuo. Ento, ns simplesmente os cercamos com

19
00:01:12,000 --> 00:01:16,000
$ sinais como esse e voc pode ver as mudanas de cor

20
00:01:16,000 --> 00:01:20,000
deles, ento isso indica que cada um deles  um parmetro.

21
00:01:20,000 --> 00:01:24,000
OK?

22
00:01:24,000 --> 00:01:28,000
Agora aqui temos esse aviso, sem

23
00:01:28,000 --> 00:01:32,000
contexto aplicvel ainda. Clique em Definir, ento  basicamente onde especificamos

24
00:01:32,000 --> 00:01:36,000
onde podemos usar este modelo ao vivo. Ns no temos C # nesta

25
00:01:36,000 --> 00:01:40,000
lista, ento eu uso outro. Agora salve, ok,

26
00:01:40,000 --> 00:01:44,000
ento, de volta ao nosso projeto

27
00:01:44,000 --> 00:01:48,000
de teste de unidade. Eu vou criar

28
00:01:48,000 --> 00:01:52,000
uma nova classe de teste, FizzBuzzTests.

29
00:01:52,000 --> 00:01:56,000
Primeiro vou decorar isso com

30
00:01:56,000 --> 00:02:00,000
o TestFixture. Agora quero usar o modelo de

31
00:02:00,000 --> 00:02:04,000
vida que acabei de criar. Ento, se voc vai para

32
00:02:04,000 --> 00:02:08,000
o menu de cdigo no topo, voc pode ver este

33
00:02:08,000 --> 00:02:12,000
item de menu, Inserir Live Template, anote o atalho, no

34
00:02:12,000 --> 00:02:16,000
Mac  o comando e J. Portanto, se voc pressionar

35
00:02:16,000 --> 00:02:20,000
Command e J aqui, poder ver os modelos ativos

36
00:02:20,000 --> 00:02:24,000
aplicveis nesse contexto. Ento aqui ns temos TM. Voc pode simplesmente pressionar enter.

37
00:02:24,000 --> 00:02:28,000
E isso gera automaticamente essas coisas para o nosso mtodo de teste.

38
00:02:28,000 --> 00:02:32,000
E agora podemos definir nossos parmetros. Portanto, este primeiro parmetro  o

39
00:02:32,000 --> 00:02:36,000
nome do mtodo que estamos testando. Neste caso,

40
00:02:36,000 --> 00:02:40,000
GetOutput, agora pressionamos a

41
00:02:40,000 --> 00:02:44,000
tab, chegamos ao segundo

42
00:02:44,000 --> 00:02:48,000
parmetro do cenrio, InputIsDivisible

43
00:02:48,000 --> 00:02:52,000
por 3And5. Aba. E aqui precisamos

44
00:02:52,000 --> 00:02:56,000
especificar o comportamento esperado. Por isso,

45
00:02:56,000 --> 00:03:00,000
deve retornar FizzBuzz. Assim, podemos ver modelos

46
00:03:00,000 --> 00:03:04,000
ao vivo para ajud-lo a escrever testes mais rapidamente.

47
00:03:04,000 --> 00:03:08,000
Portanto, este  o primeiro cenrio de teste, antes de

48
00:03:08,000 --> 00:03:12,000
implementar isso, eu prefiro gerar os stubs de teste para

49
00:03:12,000 --> 00:03:16,000
todos os diferentes cenrios. Portanto, o outro cenrio  onde

50
00:03:16,000 --> 00:03:20,000
a entrada  divisvel por apenas 3. Ento, mais

51
00:03:20,000 --> 00:03:24,000
uma vez, comando e

52
00:03:24,000 --> 00:03:28,000
J, mtodo de teste,

53
00:03:28,000 --> 00:03:32,000
GetOutput, InputIsDivisibleBy3 Only. E deve ReturnFizz.

54
00:03:32,000 --> 00:03:36,000
Outro cenrio, uma vez que um (? )

55
00:03:36,000 --> 00:03:40,000
GetOutput, Input

56
00:03:40,000 --> 00:03:44,000
IsDivisibleBy5Only isso

57
00:03:44,000 --> 00:03:48,000
deve ReturnBuzz,

58
00:03:48,000 --> 00:03:52,000
e o ltimo cenrio.

59
00:03:52,000 --> 00:03:56,000
GetOutput. InputIsNot

60
00:03:56,000 --> 00:04:00,000
DivisibleBy3Or5.

61
00:04:00,000 --> 00:04:04,000
Deve ReturnSameNumber.

62
00:04:04,000 --> 00:04:08,000
Ento, esses so todos os cenrios que precisamos testar, agora

63
00:04:08,000 --> 00:04:12,000
vamos implement-los um por um. Ento, vou comear com o primeiro.

64
00:04:12,000 --> 00:04:16,000
De volta ao nosso explorador de solues, se

65
00:04:16,000 --> 00:04:20,000
voc observar a implementao dessa classe FizzBuzz.

66
00:04:20,000 --> 00:04:24,000
Voc pode ver que esse mtodo  definido como esttico. Portanto, no

67
00:04:24,000 --> 00:04:28,000
precisamos criar uma instncia dessa classe em nosso mtodo de teste.

68
00:04:28,000 --> 00:04:32,000
Em outras palavras, no temos uma parte organizada, simplesmente agimos.

69
00:04:32,000 --> 00:04:36,000
Ento FizzBuzz.

70
00:04:36,000 --> 00:04:40,000
Sada. Voc quer um nmero que seja divisvel por 3 e 5.

71
00:04:40,000 --> 00:04:44,000
Ento eu vou com 15. Obter o resultado

72
00:04:44,000 --> 00:04:48,000
E, em seguida, afirma

73
00:04:48,000 --> 00:04:52,000
que o resultado 

74
00:04:52,000 --> 00:04:56,000
igual a FizzBuzz. Agora, ao testar strings, eu lhe

75
00:04:56,000 --> 00:05:00,000
disse que  melhor no ser especfico, especialmente quando voc est

76
00:05:00,000 --> 00:05:04,000
lidando com mensagens de erro. Porque uma simples mudana pode facilmente quebrar seus testes.

77
00:05:04,000 --> 00:05:08,000
Mas, neste caso, quero verificar a correspondncia exata,

78
00:05:08,000 --> 00:05:12,000
porque esse  o objetivo dessa funo GetOutput,

79
00:05:12,000 --> 00:05:16,000
queremos garantir que ela retorne exatamente essa string.

80
00:05:16,000 --> 00:05:20,000
Agora o segundo cenrio. Para economizar tempo,

81
00:05:20,000 --> 00:05:24,000
vou copiar essas duas linhas, col-las aqui.

82
00:05:24,000 --> 00:05:28,000
Desta vez vou usar 3 como argumento para esse mtodo.

83
00:05:28,000 --> 00:05:32,000
e afirma que esse resultado  Fizz.

84
00:05:32,000 --> 00:05:36,000
Mais uma

85
00:05:36,000 --> 00:05:40,000
vez, Copie,

86
00:05:40,000 --> 00:05:44,000
levante aqui. Desta vez, a

87
00:05:44,000 --> 00:05:48,000
entrada deve ser 5 e o

88
00:05:48,000 --> 00:05:52,000
resultado deve ser Buzz. E finalmente, o ltimo caso de teste.

89
00:05:52,000 --> 00:05:56,000
Mais uma vez, copie, cole, vou usar um nmero simples

90
00:05:56,000 --> 00:06:00,000
como 1 que no  divisvel por 3 ou 5.

91
00:06:00,000 --> 00:06:04,000
E afirme que o resultado  1.

92
00:06:04,000 --> 00:06:08,000
Agora vamos executar todos os testes nesta classe. Ento Comando e

93
00:06:08,000 --> 00:06:12,000
T e comando e R.

94
00:06:12,000 --> 00:06:16,000
Ento voc pode ver todos os casos de teste aprovados com sucesso.

95
00:06:16,000 --> 00:06:19,000
Bonita.


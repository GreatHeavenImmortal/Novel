1
00:00:00,000 --> 00:00:04,000
Now, look at these three tests

2
00:00:04,000 --> 00:00:08,000
we have written for the max method. They look almost identical

3
00:00:08,000 --> 00:00:12,000
the only difference is in the values we're using

4
00:00:12,000 --> 00:00:16,000
in each test. So in this lecture I'm going to show you a

5
00:00:16,000 --> 00:00:20,000
cleaner way to rewrite these tests. In NUnit we have

6
00:00:20,000 --> 00:00:24,000
this concept called parameterized tests. So instead of these

7
00:00:24,000 --> 00:00:28,000
retest methods here. We can have one test method that takes

8
00:00:28,000 --> 00:00:32,000
parameters. And then we can supply different arguments

9
00:00:32,000 --> 00:00:36,000
in that test. So, I'm going to change the name of

10
00:00:36,000 --> 00:00:40,000
the first test method to something more generic, so,

11
00:00:40,000 --> 00:00:44,000
max when called, it should return

12
00:00:44,000 --> 00:00:48,000
a greater argument. Alright? Now here

13
00:00:48,000 --> 00:00:52,000
I'm going to add three parameters. Integer A

14
00:00:52,000 --> 00:00:56,000
Integer E, and Integer

15
00:00:56,000 --> 00:01:00,000
expected result.

16
00:01:00,000 --> 00:01:04,000
So instead of hard coding these values here, I want to pass them

17
00:01:04,000 --> 00:01:08,000
as arguments to this method. Okay? So,

18
00:01:08,000 --> 00:01:12,000
I'm going to replace 2 and 1, with A and B,

19
00:01:12,000 --> 00:01:16,000
and this is the expected result, alright?

20
00:01:16,000 --> 00:01:20,000
So now we have a generic, parameterized test

21
00:01:20,000 --> 00:01:24,000
method. In NUnit we have another useful

22
00:01:24,000 --> 00:01:28,000
attribute called test case, and with this we can supply

23
00:01:28,000 --> 00:01:32,000
different arguments with this test method. So,

24
00:01:32,000 --> 00:01:36,000
here we have three test cases, the first one is A

25
00:01:36,000 --> 00:01:40,000
is greater, so 2 and 1, and the expected

26
00:01:40,000 --> 00:01:44,000
result is 2. I'm going to duplicate this

27
00:01:44,000 --> 00:01:48,000
for the second test case, we want the second argument to be greater.

28
00:01:48,000 --> 00:01:52,000
So, 1 and 2, and the expected result is 2.

29
00:01:52,000 --> 00:01:56,000
And, the last test case, where, both arguments

30
00:01:56,000 --> 00:02:00,000
are equal. So, 1 on 1, and the expected

31
00:02:00,000 --> 00:02:04,000
result is 1. With this, we no longer need to write

32
00:02:04,000 --> 00:02:08,000
these additional tests. They are redundant.

33
00:02:08,000 --> 00:02:12,000
Isn't this cleaner? So, now let's

34
00:02:12,000 --> 00:02:16,000
run this test. Command and T, and Command and R,

35
00:02:16,000 --> 00:02:20,000
We can see the test we have written for the

36
00:02:20,000 --> 00:02:24,000
Max method now has three test cases. And they're

37
00:02:24,000 --> 00:02:28,000
all passing, if one of them fails, you can simply click,

38
00:02:28,000 --> 00:02:32,000
and look at the details of the failed test here.

39
00:02:32,000 --> 00:02:36,000
And by the way, this is one of those areas where NUnit

40
00:02:36,000 --> 00:02:40,000
is different from MS Test, in MS Test,

41
00:02:40,000 --> 00:02:44,000
unfortunately we don't have a simple solution for parameterizing tests.

42
00:02:44,000 --> 00:02:48,000
You have to create an Excel spreadsheet or a CSS

43
00:02:48,000 --> 00:02:52,000
file, put it in your test project, and then reference

44
00:02:52,000 --> 00:02:56,000
that here, and the path to that file (?) specify the worksheet, it's just

45
00:02:56,000 --> 00:03:00,000
too complex. And it surprises me that after all these years,

46
00:03:00,000 --> 00:03:04,000
MS Test still doesn't have this feature. NUnit has

47
00:03:04,000 --> 00:03:08,000
been supporting this for a long time. But as you probably know, this is the case

48
00:03:08,000 --> 00:03:12,000
with Microsoft, Microsoft is often 5 years behind the game.

49
00:03:12,000 --> 00:03:16,000
So, whatever other frameworks and other third party libraries do, Microsoft

50
00:03:16,000 --> 00:03:20,000
will adopt that after 5 years. So that's why NUnit

51
00:03:20,000 --> 00:03:24,000
is my preferred testing framework at the time of recording this video.




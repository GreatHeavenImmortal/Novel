1
00:00:00,000 --> 00:00:04,000
The first thing I want to improve in this method

2
00:00:04,000 --> 00:00:08,000
is how we construct arrival or departure data.

3
00:00:08,000 --> 00:00:12,000
So you can see in every test method, you're repeating

4
00:00:12,000 --> 00:00:16,000
these 2 pm or 10 am times. This is creating extra

5
00:00:16,000 --> 00:00:20,000
noise in the code, and it doesn't add any value. So I'm going to create

6
00:00:20,000 --> 00:00:24,000
2 helper methods in this test class to construct

7
00:00:24,000 --> 00:00:28,000
arrival or departure date times. So,

8
00:00:28,000 --> 00:00:32,000
we create a private helper method, and put them

9
00:00:32,000 --> 00:00:36,000
all at the end of this class, because we don't them to pollute our test

10
00:00:36,000 --> 00:00:40,000
code. So, this method returns a DateTime object.

11
00:00:40,000 --> 00:00:44,000
And we're going to call them ArriveOn

12
00:00:44,000 --> 00:00:48,000
so it takes a year, month, and date

13
00:00:48,000 --> 00:00:52,000
without hour, minute, and seconds.

14
00:00:52,000 --> 00:00:56,000
So here we simply return a new DateTime

15
00:00:56,000 --> 00:01:00,000
with year, month, and day, and set the hour

16
00:01:00,000 --> 00:01:04,000
to 14, minutes to 0 and seconds to 0.

17
00:01:04,000 --> 00:01:08,000
Similarly, we're going to create

18
00:01:08,000 --> 00:01:12,000
another method called

19
00:01:12,000 --> 00:01:16,000
DepartOn, and create a DateTime

20
00:01:16,000 --> 00:01:20,000
object for that date, let's set the time

21
00:01:20,000 --> 00:01:24,000
to 10 am. With these two methods, we can name

22
00:01:24,000 --> 00:01:28,000
our test method a little bit cleaner. So, look what happens.

23
00:01:28,000 --> 00:01:32,000
We can replace this with ArriveOn.

24
00:01:32,000 --> 00:01:36,000
And get rid of these three magic numbers, look,

25
00:01:36,000 --> 00:01:40,000
it's already much better. And similarly, DepartOn

26
00:01:40,000 --> 00:01:44,000
and then we get rid of these 3 numbers.

27
00:01:44,000 --> 00:01:48,000
one more time, ArriveOn

28
00:01:48,000 --> 00:01:52,000
let's clean this up,

29
00:01:52,000 --> 00:01:56,000
and finally, Depart on

30
00:01:56,000 --> 00:02:00,000
Okay, now,

31
00:02:00,000 --> 00:02:04,000
it's a little bit better, but we're not done yet. It would be nicer

32
00:02:04,000 --> 00:02:08,000
if we could construct the ArrivalDate

33
00:02:08,000 --> 00:02:12,000
and DepartureDate for this new booking relative

34
00:02:12,000 --> 00:02:16,000
to the existing booking. So instead of having four different dates here,

35
00:02:16,000 --> 00:02:20,000
it would be nice if we could have a helper method like

36
00:02:20,000 --> 00:02:24,000
Before, and then we pass existingBooking.

37
00:02:24,000 --> 00:02:28,000
.ArrivalDate.

38
00:02:28,000 --> 00:02:32,000
This way we'll have less magic numbers in our test, and our

39
00:02:32,000 --> 00:02:36,000
code clearly reveals the intention, which is the scenario

40
00:02:36,000 --> 00:02:40,000
we're testing here, booking starts and finishes before an existing

41
00:02:40,000 --> 00:02:44,000
booking. So, in order to get here, we

42
00:02:44,000 --> 00:02:48,000
should extract this booking into a private field in this class.

43
00:02:48,000 --> 00:02:52,000
And this adds another value, because for other test methods

44
00:02:52,000 --> 00:02:56,000
we're going to create here, we don't have to repeat creating this booking object.

45
00:02:56,000 --> 00:03:00,000
Because to make this test simple, I want to use the same booking, the same

46
00:03:00,000 --> 00:03:04,000
existing booking for 15th to 20th of January.

47
00:03:04,000 --> 00:03:08,000
And I only want to modify the arrival and departure date

48
00:03:08,000 --> 00:03:12,000
of the new booking. So, why this is selected,

49
00:03:12,000 --> 00:03:16,000
here we can refactor this code by pressing alt and enter.

50
00:03:16,000 --> 00:03:20,000
It's going to refactor, and Introduce Field.

51
00:03:20,000 --> 00:03:24,000
So,

52
00:03:24,000 --> 00:03:28,000
look, Rider created a private field called underline

53
00:03:28,000 --> 00:03:32,000
booking, and initialized it here in our test method,

54
00:03:32,000 --> 00:03:36,000
and then simply referenced it in the list of existing bookings.

55
00:03:36,000 --> 00:03:40,000
Now, we don't want to keep the initialization of this field here, because we don't want to

56
00:03:40,000 --> 00:03:44,000
repeat it in every test. So, we put it in our SetUp method.

57
00:03:44,000 --> 00:03:48,000
So, let's create a SetUp method,

58
00:03:48,000 --> 00:03:52,000
public void SetUp

59
00:03:52,000 --> 00:03:56,000
and here we simply initialize this booking object.

60
00:03:56,000 --> 00:04:00,000
Now, with this SetUp method in place,

61
00:04:00,000 --> 00:04:04,000
we can also move these few lines

62
00:04:04,000 --> 00:04:08,000
in the SetUp method, because we're going to repeat these lines

63
00:04:08,000 --> 00:04:12,000
in every test method and that's really bad. So, let's cut these few lines,

64
00:04:12,000 --> 00:04:16,000
and put them inside the SetUp method.

65
00:04:16,000 --> 00:04:20,000
Now, we need to promote this repository

66
00:04:20,000 --> 00:04:24,000
object here, which is a local object in this method, we need to promote this

67
00:04:24,000 --> 00:04:28,000
to a private field, so we can reference it here.

68
00:04:28,000 --> 00:04:32,000
So one more time, I'm going to refactor this code and introduce

69
00:04:32,000 --> 00:04:36,000
a private field. So alt and enter, refactor,

70
00:04:36,000 --> 00:04:40,000
introduce field. So,

71
00:04:40,000 --> 00:04:44,000
now, look we have another private field

72
00:04:44,000 --> 00:04:48,000
here, called _repository.

73
00:04:48,000 --> 00:04:52,000
Now finally, we can reference that

74
00:04:52,000 --> 00:04:56,000
object here. Look, our test method is already

75
00:04:56,000 --> 00:05:00,000
way shorter, it's only 5 lines of code. Now finally,

76
00:05:00,000 --> 00:05:04,000
let's add this helper method, before and then after

77
00:05:04,000 --> 00:05:08,000
It's very easy to implement. So, private

78
00:05:08,000 --> 00:05:12,000
DateTime Before it gets

79
00:05:12,000 --> 00:05:16,000
a DateTime object. That's

80
00:05:16,000 --> 00:05:20,000
simply returns dateTime.Add

81
00:05:20,000 --> 00:05:24,000
Days, -1, so we can shift it one day before.

82
00:05:24,000 --> 00:05:28,000
Okay? With this, we can change this line

83
00:05:28,000 --> 00:05:32,000
to something like this.

84
00:05:32,000 --> 00:05:36,000
Now we need to change this to _

85
00:05:36,000 --> 00:05:40,000
booking.ArrivalDate, like this.

86
00:05:40,000 --> 00:05:44,000
Actually it's better to rename this field and call it ExistingBooking.

87
00:05:44,000 --> 00:05:48,000
Because it shows the intention very clearly.

88
00:05:48,000 --> 00:05:52,000
So, let's just name these two, existingBooking.

89
00:05:52,000 --> 00:05:56,000
Now similarly, let's create another

90
00:05:56,000 --> 00:06:00,000
method called After. So, let's select this,

91
00:06:00,000 --> 00:06:04,000
duplicate

92
00:06:04,000 --> 00:06:08,000
and call it after, and here we simply get

93
00:06:08,000 --> 00:06:12,000
this DateTime object, and add 1 day to it.

94
00:06:12,000 --> 00:06:16,000
Now we're not going to use this method in this test case, but we're going to use it when writing future

95
00:06:16,000 --> 00:06:20,000
tests. Now there is one tiny problem here. If

96
00:06:20,000 --> 00:06:24,000
we use our before method here, we'll end up with Arrival

97
00:06:24,000 --> 00:06:28,000
Date and DepartureDate being equal. So,

98
00:06:28,000 --> 00:06:32,000
I want to allow the consumer of this method to pass

99
00:06:32,000 --> 00:06:36,000
the number of days before a given date. So,

100
00:06:36,000 --> 00:06:40,000
let's add a parameter called days

101
00:06:40,000 --> 00:06:44,000
and here we replace one with days.

102
00:06:44,000 --> 00:06:48,000
Now, to make it easier to call this method we can also set a default value for this

103
00:06:48,000 --> 00:06:52,000
for this parameter, we can set it to 1, now

104
00:06:52,000 --> 00:06:56,000
here, when calling the before method, we can pass

105
00:06:56,000 --> 00:07:00,000
2 as an argument. However, someone looking at this

106
00:07:00,000 --> 00:07:04,000
code, they may not know straight away what 2 represents here.

107
00:07:04,000 --> 00:07:08,000
So, we can use name arguments in C#, days:

108
00:07:08,000 --> 00:07:12,000
2. Now it's very clear, so 2 days,

109
00:07:12,000 --> 00:07:16,000
before the arrival date of existing booking. Now similarly

110
00:07:16,000 --> 00:07:20,000
I'm going to replace this with Beforeexisting

111
00:07:20,000 --> 00:07:24,000
Booking.arrival date, but this time I'm not going to pass

112
00:07:24,000 --> 00:07:28,000
days, because by default days is 1. So this is

113
00:07:28,000 --> 00:07:32,000
the end result, our test method is very short, only a few lines of

114
00:07:32,000 --> 00:07:36,000
code, and the code clearly reveals an intention. Now,

115
00:07:36,000 --> 00:07:40,000
let's run this test and make sure we heave not broken anything during our

116
00:07:40,000 --> 00:07:44,000
refactorings. Okay,

117
00:07:44,000 --> 00:07:48,000
the test is passing beautiful. Next, we're going to look at the second test case.


